{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sam Borghese\n",
    "## Homework 3 Question 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import tensorflow\n",
    "from tensorflow.keras.datasets import imdb\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer \n",
    "from sklearn.linear_model import LassoCV\n",
    "from sklearn.linear_model import Lasso\n",
    "\n",
    "import scipy\n",
    "from scipy.stats import norm\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#(training_data, training_targets), (testing_data, testing_targets)\n",
    "(Dt,Yt), (Dv,Yv) = imdb.load_data(num_words = 5000) \n",
    "tok = Tokenizer(num_words = 5000)\n",
    "Xt = tok.sequences_to_matrix(Dt, mode=\"count\")\n",
    "Xv = tok.sequences_to_matrix(Dv, mode=\"count\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Normalize Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LassoCV(alphas=None, copy_X=True, cv=5, eps=0.001, fit_intercept=True,\n",
       "        max_iter=1000, n_alphas=100, n_jobs=None, normalize=False,\n",
       "        positive=False, precompute='auto', random_state=None,\n",
       "        selection='cyclic', tol=0.0001, verbose=False)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alpha = .05\n",
    "c = 1.1\n",
    "muhat = np.mean(Xt,axis = 0)\n",
    "stdhat = np.std(Xt,axis = 0)\n",
    "sel = stdhat > 0.10\n",
    "Xt_tilde = (Xt[:,sel] - muhat[sel])/stdhat[sel] \n",
    "Xv_tilde = (Xv[:,sel] - muhat[sel])/stdhat[sel] \n",
    "\n",
    "# Fit using CV\n",
    "lasso = LassoCV(cv = 5)\n",
    "lasso.fit(Xt_tilde,Yt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuray of Lasso slecting llambda using CV is  0.87632\n"
     ]
    }
   ],
   "source": [
    "# Evaluation\n",
    "Y_pred = lasso.predict(Xv_tilde)\n",
    "Y_pred_bin = Y_pred>0.5\n",
    "n = Yv.size\n",
    "print(\"The accuray of Lasso slecting llambda using CV is \", \n",
    "      np.sum(Yv == Y_pred_bin) / n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The llambda selected using BHHC is  0.0024129582030969097\n"
     ]
    }
   ],
   "source": [
    "print(\"The llambda selected using BHHC is \", \n",
    "      lasso.alpha_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Belloni-Chen-Chernozhukov-Hansen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "def BCCH(X_tilde, Yt):\n",
    "    alpha = .05\n",
    "    c = 1.1\n",
    "    n = X_tilde.shape[0]\n",
    "    p = X_tilde.shape[1]\n",
    "\n",
    "    llambda_pilot = ( (2 * c) / np.sqrt(n) ) * norm.ppf(1 - (alpha/(2*p))) * np.sqrt(max(np.sum(X_tilde**2 * Yt.reshape(-1,1)**2, axis = 0))/n)\n",
    "\n",
    "    lasso_pilot = Lasso(alpha=llambda_pilot, max_iter = 10000)\n",
    "    lasso_pilot.fit(X_tilde, Yt)\n",
    "                    \n",
    "    epsilon = Yt - lasso_pilot.predict(X_tilde)\n",
    "\n",
    "    llambda = ( (2 * c) / np.sqrt(n) ) * norm.ppf(1 - (alpha/(2*p))) * np.sqrt(max(np.sum(X_tilde**2 * epsilon.reshape(-1,1)**2, axis = 0))/n)\n",
    "\n",
    "    return(llambda)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "llambda = BCCH(Xt_tilde, Yt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Lasso(alpha=0.04058979272796538, copy_X=True, fit_intercept=True, max_iter=1000,\n",
       "      normalize=False, positive=False, precompute=False, random_state=None,\n",
       "      selection='cyclic', tol=0.0001, warm_start=False)"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso = Lasso(alpha=llambda)\n",
    "lasso.fit(Xt_tilde, Yt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The accuray of Lasso slecting llambda using BHHC is  0.76084\n"
     ]
    }
   ],
   "source": [
    "Y_pred = lasso.predict(Xv_tilde)\n",
    "Y_pred_bin = Y_pred>0.5\n",
    "n = Yv.size\n",
    "print(\"The accuray of Lasso slecting llambda using BHHC is \", \n",
    "      np.sum(Yv == Y_pred_bin) / n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The llambda selected using BHHC is  0.04058979272796538\n"
     ]
    }
   ],
   "source": [
    "print(\"The llambda selected using BHHC is \", \n",
    "      llambda)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using BCCH to select llamnbda for lasso we see a 76% accuracy in out-of-sample predictions, compared to cross-validation which yields 88%. The idea is that BHHC will perform better in variable selection to make up for this."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
